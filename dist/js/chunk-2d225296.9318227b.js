(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-2d225296"],{e2e8:function(e,r,n){"use strict";n.r(r),n.d(r,"getGeometryServiceURL",(function(){return l})),n.d(r,"projectGeometry",(function(){return u}));var t=n("1325"),i=n("ce50"),o=n("0224"),a=n("ac91"),c=n("7e6b");async function l(e=null,r){var n,a;if(t["a"].geometryServiceUrl)return t["a"].geometryServiceUrl;if(!e)throw new i["a"]("internal:geometry-service-url-not-configured");let c;c="portal"in e?e.portal||o["a"].getDefault():e,await c.load({signal:r});const l=null==(n=c.helperServices)||null==(a=n.geometry)?void 0:a.url;if(!l)throw new i["a"]("internal:geometry-service-url-not-configured");return l}async function u(e,r,n=null,t){const o=await l(n,t),u=new c["a"];u.geometries=[e],u.outSpatialReference=r;const s=await Object(a["a"])(o,u,{signal:t});if(s&&Array.isArray(s)&&1===s.length)return s[0];throw new i["a"]("internal:geometry-service-projection-failed")}}}]);