(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-2d0bdf78"],{"2df6":function(e,t,i){"use strict";i.r(t),i.d(t,"ElevationQuery",(function(){return y})),i.d(t,"GeometryDescriptor",(function(){return T})),i.d(t,"default",(function(){return y})),i.d(t,"getFinestLodIndex",(function(){return w}));var s=i("792b"),n=i("ce50"),l=i("b2b2"),o=i("f4cc"),a=i("8048"),r=i("57dc"),c=i("4ae5"),u=i("521c"),h=i("8188"),p=i("9180"),d=i("851f");class f{constructor(e,t=null){if(this.tile=e,Object(l["l"])(t)){const i=e.extent;this.samplerData={pixelData:t.values,width:t.width,height:t.height,safeWidth:.99999999*(t.width-1),noDataValue:t.noDataValue,dx:(t.width-1)/(i[2]-i[0]),dy:(t.width-1)/(i[3]-i[1]),x0:i[0],y1:i[3]}}}sample(e,t){if(Object(l["k"])(this.samplerData))return;const{safeWidth:i,width:s,pixelData:n,noDataValue:o,dx:a,dy:r,y1:c,x0:u}=this.samplerData,h=m(r*(c-t),0,i),p=m(a*(e-u),0,i),d=Math.floor(h),f=Math.floor(p),y=d*s+f,T=y+s,x=n[y],v=n[T],g=n[y+1],w=n[T+1];if(x!==o&&v!==o&&g!==o&&w!==o){const e=p-f,t=x+(g-x)*e;return t+(v+(w-v)*e-t)*(h-d)}}}function m(e,t,i){return e<t?t:e>i?i:e}class y{async queryAll(e,t,i){if(!(e=i&&i.ignoreInvisibleLayers?e.filter(e=>e.visible):e.slice()).length)throw new n["a"]("elevation-query:invalid-layer","Elevation queries require at least one elevation layer to fetch tiles from");const s=T.fromGeometry(t);let l=!1;i&&i.returnSampleInfo||(l=!0);const o={..._,...i,returnSampleInfo:!0},a=await this.query(e[e.length-1],s,o),r=await this._queryAllContinue(e,a,o);return r.geometry=r.geometry.export(),l&&delete r.sampleInfo,r}async query(e,t,i){if(!e)throw new n["a"]("elevation-query:invalid-layer","Elevation queries require an elevation layer to fetch tiles from");if(!t||!(t instanceof T)&&"point"!==t.type&&"multipoint"!==t.type&&"polyline"!==t.type)throw new n["a"]("elevation-query:invalid-geometry","Only point, polyline and multipoint geometries can be used to query elevation");const s={..._,...i},l=new v(e,t.spatialReference,s),o=s.signal;return await e.load({signal:o}),await this._createGeometryDescriptor(l,t,o),await this._selectTiles(l,o),await this._populateElevationTiles(l,o),this._sampleGeometryWithElevation(l),this._createQueryResult(l,o)}async createSampler(e,t,i){if(!e)throw new n["a"]("elevation-query:invalid-layer","Elevation queries require an elevation layer to fetch tiles from");if(!t||"extent"!==t.type)throw new n["a"]("elevation-query:invalid-extent","Invalid or undefined extent");const s={..._,...i};return this._createSampler(e,t,s)}async createSamplerAll(e,t,i){if(!(e=i&&i.ignoreInvisibleLayers?e.filter(e=>e.visible):e.slice()).length)throw new n["a"]("elevation-query:invalid-layer","Elevation queries require at least one elevation layer to fetch tiles from");if(!t||"extent"!==t.type)throw new n["a"]("elevation-query:invalid-extent","Invalid or undefined extent");const s={..._,...i,returnSampleInfo:!0},l=await this._createSampler(e[e.length-1],t,s);return this._createSamplerAllContinue(e,t,l,s)}async _createSampler(e,t,i,s){const n=i.signal;await e.load({signal:n});const l=t.spatialReference,o=e.tileInfo.spatialReference;l.equals(o)||(await Object(h["g"])([{source:l,dest:o}],{signal:n}),t=Object(h["m"])(t,o));const a=new g(e,t,i,s);return await this._selectTiles(a,n),await this._populateElevationTiles(a,n),new d["a"](a.elevationTiles,a.layer.tileInfo,a.options.noDataValue)}async _createSamplerAllContinue(e,t,i,s){if(e.pop(),!e.length)return i;const n=i.samplers.map(e=>Object(p["s"])(e.extent)),l=await this._createSampler(e[e.length-1],t,s,n);if(0===l.samplers.length)return i;const o=i.samplers.concat(l.samplers),a=new d["a"](o,s.noDataValue);return this._createSamplerAllContinue(e,t,a,s)}async _queryAllContinue(e,t,i){const s=e.pop(),n=t.geometry.coordinates,l=[],o=[];for(let c=0;c<n.length;c++){const i=t.sampleInfo[c];i.demResolution>=0?i.source||(i.source=s):e.length&&(l.push(n[c]),o.push(c))}if(!e.length||0===l.length)return t;const a=t.geometry.clone(l),r=await this.query(e[e.length-1],a,i);return o.forEach((e,i)=>{n[e].z=r.geometry.coordinates[i].z,t.sampleInfo[e].demResolution=r.sampleInfo[i].demResolution}),this._queryAllContinue(e,t,i)}async _createQueryResult(e,t){const i={geometry:(await e.geometry.project(e.outSpatialReference,t)).export(),noDataValue:e.options.noDataValue};return e.options.returnSampleInfo&&(i.sampleInfo=this._extractSampleInfo(e)),e.geometry.coordinates.forEach(e=>{e.tile=null,e.elevationTile=null}),i}async _createGeometryDescriptor(e,t,i){let s;const l=e.layer.tileInfo.spatialReference;if(t instanceof T?s=await t.project(l,i):(await Object(h["g"])([{source:t.spatialReference,dest:l}],{signal:i}),s=Object(h["m"])(t,l)),!s)throw new n["a"]("elevation-query:spatial-reference-mismatch",`Cannot query elevation in '${t.spatialReference.wkid}' on an elevation service in '${l.wkid}'`);e.geometry=T.fromGeometry(s)}async _selectTiles(e,t){const i=e.options.demResolution;if("geometry"===e.type&&this._preselectOutsideLayerExtent(e),"number"==typeof i)this._selectTilesClosestResolution(e);else if("finest-contiguous"===i)await this._selectTilesFinestContiguous(e,t);else{if("auto"!==i)throw new n["a"]("elevation-query:invalid-dem-resolution",`Invalid dem resolution value '${i}', expected a number, "finest-contiguous" or "auto"`);await this._selectTilesAuto(e,t)}}_preselectOutsideLayerExtent(e){if(Object(l["k"])(e.layer.fullExtent))return;const t=new f(null);t.sample=()=>e.options.noDataValue,e.outsideExtentTile=t;const i=e.layer.fullExtent;e.geometry.coordinates.forEach(e=>{const s=e.x,n=e.y;(s<i.xmin||s>i.xmax||n<i.ymin||n>i.ymax)&&(e.elevationTile=t)})}_selectTilesClosestResolution(e){const t=e.layer.tileInfo,i=this._findNearestDemResolutionLODIndex(t,e.options.demResolution);e.selectTilesAtLOD(i)}_findNearestDemResolutionLODIndex(e,t){const i=t/Object(a["f"])(e.spatialReference);let s=e.lods[0],n=0;for(let l=1;l<e.lods.length;l++){const t=e.lods[l];Math.abs(t.resolution-i)<Math.abs(s.resolution-i)&&(s=t,n=l)}return n}async _selectTilesFinestContiguous(e,t){const i=w(e.layer.tileInfo,e.options.minDemResolution);await this._selectTilesFinestContiguousAt(e,i,t)}async _selectTilesFinestContiguousAt(e,t,i){const s=e.layer;if(e.selectTilesAtLOD(t),t<0)return;const l=s.tilemapCache,a=e.getTilesToFetch();try{if(l)await Object(o["A"])(Promise.all(a.map(e=>l.fetchAvailability(e.level,e.row,e.col,{signal:i}))),i);else if(await this._populateElevationTiles(e,i),!e.allElevationTilesFetched())throw e.clearElevationTiles(),new n["a"]("elevation-query:has-unavailable-tiles")}catch(r){Object(o["v"])(r),await this._selectTilesFinestContiguousAt(e,t-1,i)}}async _populateElevationTiles(e,t){const i=e.getTilesToFetch(),s={},n=e.options.cache,a=e.options.noDataValue,r=i.map(async i=>{const o=`${e.layer.uid}:${i.id}:${a}`,r=Object(l["l"])(n)?n.get(o):null,c=Object(l["l"])(r)?r:await e.layer.fetchTile(i.level,i.row,i.col,{noDataValue:a,signal:t});Object(l["l"])(n)&&n.put(o,c),s[i.id]=new f(i,c)});await Object(o["A"])(Object(o["j"])(r),t),e.populateElevationTiles(s)}async _selectTilesAuto(e,t){this._selectTilesAutoFinest(e),this._reduceTilesForMaximumRequests(e);const i=e.layer.tilemapCache;if(!i)return this._selectTilesAutoPrefetchUpsample(e,t);const n=e.getTilesToFetch(),l={},a=n.map(async e=>{const n={id:null,level:0,row:0,col:0,extent:Object(p["l"])()},a=await Object(s["d"])(i.fetchAvailabilityUpsample(e.level,e.row,e.col,n,{signal:t}));!1===a.ok?Object(o["v"])(a.error):l[e.id]=n});await Object(o["A"])(Promise.all(a),t),e.remapTiles(l)}_reduceTilesForMaximumRequests(e){const t=e.layer.tileInfo;let i=0;const s={},n=e=>{e.id in s?s[e.id]++:(s[e.id]=1,i++)},l=e=>{const t=s[e.id];1===t?(delete s[e.id],i--):s[e.id]=t-1};e.forEachTileToFetch(n,l);let o=!0;for(;o&&(o=!1,e.forEachTileToFetch(s=>{i<=e.options.maximumAutoTileRequests||(l(s),t.upsampleTile(s)&&(o=!0),n(s))},l),o););}_selectTilesAutoFinest(e){const t=w(e.layer.tileInfo,e.options.minDemResolution);e.selectTilesAtLOD(t,e.options.maximumAutoTileRequests)}async _selectTilesAutoPrefetchUpsample(e,t){const i=e.layer.tileInfo;await this._populateElevationTiles(e,t);let s=!1;e.forEachTileToFetch((e,t)=>{i.upsampleTile(e)?s=!0:t()}),s&&await this._selectTilesAutoPrefetchUpsample(e,t)}_sampleGeometryWithElevation(e){e.geometry.coordinates.forEach(t=>{const i=t.elevationTile;let s=e.options.noDataValue;if(i){const e=i.sample(t.x,t.y);Object(l["l"])(e)?s=e:t.elevationTile=null}t.z=s})}_extractSampleInfo(e){const t=e.layer.tileInfo,i=Object(a["f"])(t.spatialReference);return e.geometry.coordinates.map(s=>{let n=-1;return s.elevationTile&&s.elevationTile!==e.outsideExtentTile&&(n=t.lodAt(s.elevationTile.tile.level).resolution*i),{demResolution:n}})}}class T{export(){return this._exporter(this.coordinates,this.spatialReference)}clone(e){const t=new T;return t.geometry=this.geometry,t.spatialReference=this.spatialReference,t.coordinates=e||this.coordinates.map(e=>this._cloneCoordinate(e)),t._exporter=this._exporter,t}async project(e,t){if(this.spatialReference.equals(e))return this.clone();await Object(h["g"])([{source:this.spatialReference,dest:e}],{signal:t});const i=new r["a"]({spatialReference:this.spatialReference,points:this.coordinates.map(e=>[e.x,e.y])}),s=Object(h["m"])(i,e);if(!s)return null;const n=this.coordinates.map((e,t)=>{const i=this._cloneCoordinate(e),n=s.points[t];return i.x=n[0],i.y=n[1],i}),l=this.clone(n);return l.spatialReference=e,l}_cloneCoordinate(e){return{x:e.x,y:e.y,z:e.z,m:e.m,tile:null,elevationTile:null}}static fromGeometry(e){const t=new T;if(t.geometry=e,t.spatialReference=e.spatialReference,e instanceof T)t.coordinates=e.coordinates.map(e=>t._cloneCoordinate(e)),t._exporter=(t,i)=>{const s=e.clone(t);return s.spatialReference=i,s};else switch(e.type){case"point":{const i=e,{hasZ:s,hasM:n}=i;t.coordinates=s&&n?[{x:i.x,y:i.y,z:i.z,m:i.m}]:s?[{x:i.x,y:i.y,z:i.z}]:n?[{x:i.x,y:i.y,m:i.m}]:[{x:i.x,y:i.y}],t._exporter=(t,i)=>e.hasM?new c["a"](t[0].x,t[0].y,t[0].z,t[0].m,i):new c["a"](t[0].x,t[0].y,t[0].z,i);break}case"multipoint":{const i=e,{hasZ:s,hasM:n}=i;t.coordinates=s&&n?i.points.map(e=>({x:e[0],y:e[1],z:e[2],m:e[3]})):s?i.points.map(e=>({x:e[0],y:e[1],z:e[2]})):n?i.points.map(e=>({x:e[0],y:e[1],m:e[2]})):i.points.map(e=>({x:e[0],y:e[1]})),t._exporter=(t,i)=>e.hasM?new r["a"]({points:t.map(e=>[e.x,e.y,e.z,e.m]),hasZ:!0,hasM:!0,spatiaReference:i}):new r["a"](t.map(e=>[e.x,e.y,e.z]),i);break}case"polyline":{const i=e,s=[],n=[],{hasZ:l,hasM:o}=e;let a=0;for(const e of i.paths)if(n.push([a,a+e.length]),a+=e.length,l&&o)for(const t of e)s.push({x:t[0],y:t[1],z:t[2],m:t[3]});else if(l)for(const t of e)s.push({x:t[0],y:t[1],z:t[2]});else if(o)for(const t of e)s.push({x:t[0],y:t[1],m:t[2]});else for(const t of e)s.push({x:t[0],y:t[1]});t.coordinates=s,t._exporter=(t,i)=>{const s=e.hasM?t.map(e=>[e.x,e.y,e.z,e.m]):t.map(e=>[e.x,e.y,e.z]),l=n.map(e=>s.slice(e[0],e[1]));return new u["a"]({paths:l,hasM:e.hasM,hasZ:!0,spatialReference:i})};break}}return t}}class x{constructor(e,t){this.layer=e,this.options=t}}class v extends x{constructor(e,t,i){super(e,i),this.outSpatialReference=t,this.type="geometry"}selectTilesAtLOD(e){if(e<0)this.geometry.coordinates.forEach(e=>e.tile=null);else{const t=this.layer.tileInfo,i=t.lods[e].level;this.geometry.coordinates.forEach(e=>{e.tile=t.tileAt(i,e.x,e.y)})}}allElevationTilesFetched(){return!this.geometry.coordinates.some(e=>!e.elevationTile)}clearElevationTiles(){for(const e of this.geometry.coordinates)e.elevationTile!==this.outsideExtentTile&&(e.elevationTile=null)}populateElevationTiles(e){for(const t of this.geometry.coordinates)!t.elevationTile&&t.tile&&(t.elevationTile=e[t.tile.id])}remapTiles(e){for(const t of this.geometry.coordinates)t.tile=e[t.tile.id]}getTilesToFetch(){const e={},t=[];for(const i of this.geometry.coordinates){const s=i.tile;i.elevationTile||!i.tile||e[s.id]||(e[s.id]=s,t.push(s))}return t}forEachTileToFetch(e){for(const t of this.geometry.coordinates)t.tile&&!t.elevationTile&&e(t.tile,()=>t.tile=null)}}class g extends x{constructor(e,t,i,s){super(e,i),this.type="extent",this.elevationTiles=[],this.candidateTiles=[],this.fetchedCandidates=new Set,this.extent=t.intersection(e.fullExtent),this.maskExtents=s}selectTilesAtLOD(e,t){const i=this._maximumLodForRequests(t),s=Math.min(i,e);s<0?this.candidateTiles.length=0:this._selectCandidateTilesCoveringExtentAt(s)}_maximumLodForRequests(e){const t=this.layer.tileInfo;if(!e)return t.lods.length-1;const i=this.extent;if(Object(l["k"])(i))return-1;for(let s=t.lods.length-1;s>=0;s--){const n=t.lods[s],l=n.resolution*t.size[0],o=n.resolution*t.size[1];if(Math.ceil(i.width/l)*Math.ceil(i.height/o)<=e)return s}return-1}allElevationTilesFetched(){return this.candidateTiles.length===this.elevationTiles.length}clearElevationTiles(){this.elevationTiles.length=0,this.fetchedCandidates.clear()}populateElevationTiles(e){for(const t of this.candidateTiles){const i=e[t.id];i&&(this.fetchedCandidates.add(t),this.elevationTiles.push(i))}}remapTiles(e){this.candidateTiles=this._uniqueNonOverlappingTiles(this.candidateTiles.map(t=>e[t.id]))}getTilesToFetch(){return this.candidateTiles}forEachTileToFetch(e,t){const i=this.candidateTiles;this.candidateTiles=[],i.forEach(i=>{if(this.fetchedCandidates.has(i))return void(t&&t(i));let s=!1;e(i,()=>s=!0),s?t&&t(i):this.candidateTiles.push(i)}),this.candidateTiles=this._uniqueNonOverlappingTiles(this.candidateTiles,t)}_uniqueNonOverlappingTiles(e,t){const i={},s=[];for(const l of e)i[l.id]?t&&t(l):(i[l.id]=l,s.push(l));const n=s.sort((e,t)=>e.level-t.level);return n.filter((e,i)=>{for(let s=0;s<i;s++)if(Object(p["g"])(n[s].extent,e.extent))return t&&t(e),!1;return!0})}_selectCandidateTilesCoveringExtentAt(e){this.candidateTiles.length=0;const t=this.extent;if(Object(l["k"])(t))return;const i=this.layer.tileInfo,s=i.lods[e],n=i.tileAt(s.level,t.xmin,t.ymin),o=s.resolution*i.size[0],a=s.resolution*i.size[1],r=Math.ceil((t.xmax-n.extent[0])/o),c=Math.ceil((t.ymax-n.extent[1])/a);for(let l=0;l<c;l++)for(let e=0;e<r;e++){const t={id:null,level:n.level,row:n.row-l,col:n.col+e};i.updateTileInfo(t),this._tileIsMasked(t)||this.candidateTiles.push(t)}}_tileIsMasked(e){return!!this.maskExtents&&this.maskExtents.some(t=>Object(p["g"])(t,e.extent))}}function w(e,t){let i=e.lods.length-1;if(t>0){const s=e.lods.findIndex(e=>e.resolution<t);0===s?i=0:s>0&&(i=s-1)}return i}const _={maximumAutoTileRequests:20,noDataValue:0,returnSampleInfo:!1,demResolution:"auto",minDemResolution:0}}}]);
//# sourceMappingURL=chunk-2d0bdf78.d3be6e33.js.map